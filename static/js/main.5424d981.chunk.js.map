{"version":3,"sources":["get-files-from-data-transfer.ts","store/actions.ts","store/index.ts","ResetButton.tsx","FileSelector.tsx","FileName.tsx","FileLastModified.tsx","FileSize.tsx","RemoveButton.tsx","CopyButton.tsx","FilesListItem.tsx","FilesList.tsx","App.tsx","use-drag-drop.ts","use-paste.ts","index.tsx"],"names":["SUPPORT_GET_AS_ENTRY","DataTransferItem","prototype","webkitGetAsEntry","getFilesFromEntry","entry","a","isFile","Promise","resolve","file","reader","createReader","readEntries","entries","all","map","entryFiles","flatten","getFilesFromDataTransfer","dataTransfer","files","Array","from","items","filter","item","kind","length","isActionReset","action","type","isActionAddFiles","addFiles","payload","name","size","last","Date","lastModified","toISOString","blob","URL","createObjectURL","addDataTransfer","dispatch","isActionRemoveFiles","DEFAULT_STATE","latest","reducer","state","toRemove","blobs","indexOf","useSelector","useReactReduxSelector","getFiles","getLatestBlobURL","hasFiles","ResetButton","useDispatch","handleClick","React","className","onClick","FileSelector","handleChange","e","currentTarget","value","id","multiple","onChange","htmlFor","FileName","children","index","lastIndexOf","filename","substring","extension","data-type","replace","style","verticalAlign","FileLastModified","format","FileSize","filesize","round","RemoveButton","blobURL","title","CopyButton","latestBloblURL","dataURL","setDataURL","buttonText","setButtonText","process","fetch","res","FileReader","addEventListener","String","result","readAsDataURL","handleClickProcess","preventDefault","handleClickCopy","navigator","clipboard","writeText","clock","setTimeout","clearTimeout","FilesListItem","fileDetails","find","getFileDetailsByBlobURL","FilesList","key","App","handleDragover","some","dropEffect","handleDrop","window","removeEventListener","useDragDrop","handlePaste","clipboardData","document","usePaste","showReset","href","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","render","getElementById"],"mappings":"6PAEMA,EAA8E,oBAAhDC,iBAAiBC,UAAUC,iBAkBzDC,EAAiB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,0DACpBD,EAAME,OADc,gCAEH,IAAIC,SAAc,SAACC,GAAD,OAAaJ,EAAMK,KAAKD,MAFvC,cAEhBC,EAFgB,yBAGf,CAACA,IAHc,cAKhBC,EAASN,EAAMO,eALC,UAMA,IAAIJ,SAAwD,SAACC,GAAD,OAAaE,EAAOE,YAAYJ,MAN5F,eAMhBK,EANgB,iBAOGN,QAAQO,IAAID,EAAQE,IAAIZ,IAP3B,eAOhBa,EAPgB,yBAQfC,IAAQD,IARO,4CAAH,sDAYVE,EAAwB,uCAAG,WAAOC,GAAP,qBAAAd,EAAA,yDAChCe,EAAQD,EAAaC,MAAQC,MAAMC,KAAKH,EAAaC,OAAS,KAC9DG,EAAQJ,EAAaI,MAAQF,MAAMC,KAAKH,EAAaI,OAAOC,QAAO,SAACC,GAAD,MAAwB,SAAdA,EAAKC,QAAmB,IACjGC,SAAU5B,EAHkB,uBAI9Bc,EAAUU,EAAMR,KAAI,SAACU,GAAD,OAAUA,EAAKvB,sBAJL,SAMXK,QAAQO,IAAID,EAAQE,IAAIZ,IANb,cAM9Ba,EAN8B,yBAQ7BC,IAAQD,IARqB,gCAU/BI,GAV+B,2CAAH,sDCrBxBQ,EAAgB,SAACC,GAAD,MAJD,UAK1BA,EAAOC,MAiBIC,EAAmB,SAACF,GAAD,MARA,cAS9BA,EAAOC,MAGIE,EAAW,SAACZ,GAAD,MAA+C,CACrEU,KAb8B,YAc9BG,QAAS,CACPb,MAAOC,MAAMC,KAAKF,GAAO,SAACX,GAAD,MAAW,CAClCyB,KAAMzB,EAAKyB,KACXC,KAAM1B,EAAK0B,KACXL,KAAMrB,EAAKqB,MAAQ,KACnBM,KAAM,IAAIC,KAAK5B,EAAK6B,cAAcC,cAClCC,KAAMC,IAAIC,gBAAgBjC,UAKnBkC,EAAkB,SAACxB,GAAD,8CAA2F,WAAOyB,GAAP,eAAAvC,EAAA,sEACpGa,EAAyBC,GAD2E,QAClHC,EADkH,QAE9GO,QACRiB,EAASZ,EAASZ,IAHoG,2CAA3F,uDAiBlByB,EAAsB,SAAChB,GAAD,MARA,iBASjCA,EAAOC,MCtDIgB,EAAkC,CAC7C1B,MAAO,GACP2B,OAAQ,MAkCKC,EA/BmC,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAejB,EAAW,uCACnF,GAAID,EAAcC,GAChB,OAAOiB,EAGT,GAAIf,EAAiBF,GACnB,OAAO,2BACFoB,GADL,IAEE7B,MAAM,GAAD,mBACA6B,EAAM7B,OADN,YAEAS,EAAOI,QAAQb,QAEpB2B,OAAwC,IAAhClB,EAAOI,QAAQb,MAAMO,OAAeE,EAAOI,QAAQb,MAAM,GAAGoB,KAAO,OAI/E,GAAIK,EAAoBhB,GAAS,CAAC,IAC1BT,EAAkB6B,EAAlB7B,MAAO2B,EAAWE,EAAXF,OACPG,EAAWrB,EAAOI,QAAQkB,MAChC,OAAO,2BACFF,GADL,IAEE7B,MAAOA,EAAMI,QAAO,SAACf,GAAD,OAClByC,EAASE,QAAQ3C,EAAK+B,MAAQ,KAEhCO,OAAmB,OAAXA,GAAmBG,EAASE,QAAQL,GAAU,EAAIA,EAAS,OAIvE,OAAOE,GAKII,EAAsDC,IAEtDC,EAAW,SAACN,GAAD,OAA6BA,EAAM7B,OAM9CoC,EAAmB,SAACP,GAAD,OAA6BA,EAAMF,QAEtDU,EAAW,SAACR,GAAD,OAA6BA,EAAM7B,MAAMO,OAAS,G,gBCtC3D+B,EAhBe,WAC5B,IAAMd,EAAWe,cACXC,EAAcC,eAAkB,WACpCjB,EFQqC,CACvCd,KAT0B,YECvB,CAACc,IACJ,OACE,0BACEkB,UAAU,gBACVhC,KAAK,SACLiC,QAASH,GAHX,oBCuBWI,EA7BgB,WAC7B,IAAMpB,EAAWe,cACXM,EAAeJ,eAA8D,SAACK,GAC9EA,EAAEC,cAAc/C,QAClBwB,EAASZ,EAASkC,EAAEC,cAAc/C,QAIlC8C,EAAEC,cAAcC,MAAQ,MAEzB,CAACxB,IACJ,OACE,uBAAKkB,UAAU,eACb,yBACEO,GAAG,eACHvC,KAAK,OACLwC,UAAU,EACVC,SAAUN,IAEZ,yBACEH,UAAU,oBACVU,QAAQ,gBAFV,kBCCSC,EAlBmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/BC,EAAQD,EAASE,YAAY,MAClB,IAAXD,IAAcA,EAAQD,EAAS/C,QACnC,IAAMkD,EAAWH,EAASI,UAAU,EAAGH,GACjCI,EAAYL,EAASI,UAAUH,GACrC,OACE,gCACE,wBACEb,UAAU,8BACVkB,YAAWD,EAAUE,QAAQ,MAAO,IACpCC,MAAO,CAAEC,cAAe,cAE1B,4BAAON,GACNE,GAAa,4BAAOA,K,QCRZK,EAJ2B,SAAC,GAAkB,IAAhBV,EAAe,EAAfA,SAC3C,OAAO,gCAAGW,YAAO,IAAIhD,KAAKqC,GAAW,iC,iBCGxBY,EAJmB,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACnC,OAAO,gCAAGa,IAASb,EAAU,CAAEc,MAAO,MCiBzBC,EAjBuB,SAAC,GAAuB,IAAfC,EAAc,EAApBlD,KACjCI,EAAWe,cACXC,EAAcC,eAAkB,WACpCjB,EPwD4D,CAC9Dd,KAbiC,eAcjCG,QAAS,CACPkB,MAAO,CO3DauC,QACnB,CAAC9C,EAAU8C,IACd,OACE,0BACE5B,UAAU,gBACVhC,KAAK,SACLiC,QAASH,EACT+B,MAAM,oBAJR,S,QCyDWC,EAhEqB,SAAC,GAAuB,IAAfF,EAAc,EAApBlD,KAC/BqD,EAAiBxC,EAAYG,GADsB,EAE3BK,WAA8B,MAFH,mBAElDiC,EAFkD,KAEzCC,EAFyC,OAGrBlC,WAA8B,MAHT,mBAGlDmC,EAHkD,KAGtCC,EAHsC,KAInDC,EAAUrC,cAAA,sBAAkB,gCAAAxD,EAAA,+EAEZ8F,MAAMT,GAFM,cAExBU,EAFwB,gBAGXA,EAAI5D,OAHO,OAGxBA,EAHwB,QAIxB9B,EAAS,IAAI2F,YACZC,iBAAiB,QAAQ,WAC9BP,EAAWQ,OAAO7F,EAAO8F,YAE3B9F,EAAO+F,cAAcjE,GARS,4GAY/B,CAACkD,IACEgB,EAAqB7C,eAA8D,SAACK,GACxFA,EAAEyC,iBACFT,MACC,CAACA,IACEU,EAAkB/C,cAAA,uCAA8D,WAAOK,GAAP,SAAA7D,EAAA,yDACpF6D,EAAEyC,iBACc,OAAZb,EAFgF,gCAG5Ee,UAAUC,UAAUC,UAAUjB,GAH8C,OAIlFG,EAAc,WAJoE,2CAA9D,sDAMrB,CAACH,IAcJ,OAbAjC,aAAgB,WACV6B,IAAYG,GACdK,MAED,CAACR,EAASG,EAAgBK,IAC7BrC,aAAgB,WACd,GAAmB,OAAfmC,EAAqB,CACvB,IAAMgB,EAAQC,YAAW,WACvBhB,EAAc,QACb,KACH,OAAO,kBAAMiB,aAAaF,OAE3B,CAAChB,IACY,OAAZF,EAEA,0BACEhC,UAAU,gBACVhC,KAAK,SACLiC,QAAS2C,GAHX,YAUA,0BACE5C,UAAU,eACVhC,KAAK,SACLiC,QAAS6C,GAERZ,GAAc,SC3BRmB,EAxBwB,SAAC,GAAuB,IAAfzB,EAAc,EAApBlD,KAClC4E,EAAc/D,GAAY,SAACJ,GAAD,ORqCK,SAACA,EAAyByC,GAA1B,OACrCzC,EAAM7B,MAAMiG,MAAK,SAAC5G,GAAD,OAAUA,EAAK+B,OAASkD,MAAY,KQtCV4B,CAAwBrE,EAAOyC,MAC1E,OAAK0B,EAEH,uBAAKtD,UAAU,yCACb,uBAAKA,UAAU,UACb,uBAAKA,UAAU,eACb,gBAAC,EAAD,KAAWsD,EAAYlF,MAAgB,2BACvC,wBAAM4B,UAAU,kBAAiB,gBAAC,EAAD,KAAmBsD,EAAYhF,OAA+B,2BAC/F,wBAAM0B,UAAU,kBAAkBsD,EAAYtF,MAAQ,sCACrD,IAAI,wBAAMgC,UAAU,kBAAhB,UAA+C,IACpD,wBAAMA,UAAWsD,EAAYjF,KAblB,IAawC,eAAiB,gBAAgB,gBAAC,EAAD,KAAWiF,EAAYjF,QAE7G,uBAAK2B,UAAU,QACb,gBAAC,EAAD,CAAYtB,KAAMkD,KAEpB,uBAAK5B,UAAU,QACb,gBAAC,EAAD,CAActB,KAAMkD,OAfH,MCEZ6B,EAba,WAC1B,IAAMnG,EAAQiC,YAAYE,GAC1B,OACE,sBAAIO,UAAU,iBACX1C,EAAML,KAAI,SAACN,GAAD,OACT,sBAAI+G,IAAK/G,EAAK+B,MACZ,gBAAC,EAAD,CAAeA,KAAM/B,EAAK+B,aCcrBiF,EAhBO,YCLK,WACzB,IAAM7E,EAAWe,cAEjBE,aAAgB,WACd,IAAM6D,EAAiB,SAACxD,GACtB,GAAKA,EAAE/C,aAAP,CACA,IACMsC,EADQpC,MAAMC,KAAK4C,EAAE/C,aAAaI,OAAO,SAACE,GAAD,OAAUA,EAAKC,QACvCiG,MAAK,SAACjG,GAAD,MAAmB,SAATA,KACtCwC,EAAE/C,aAAayG,WAAanE,EAAW,OAAS,OAC5CA,GACFS,EAAEyC,mBAGAkB,EAAa,SAAC3D,GAClBA,EAAEyC,iBACEzC,EAAE/C,cACJyB,EAASD,EAAgBuB,EAAE/C,gBAK/B,OAFA2G,OAAOxB,iBAAiB,WAAYoB,GACpCI,OAAOxB,iBAAiB,OAAQuB,GACzB,WACLC,OAAOC,oBAAoB,WAAYL,GACvCI,OAAOC,oBAAoB,OAAQF,ODjBvCG,GENsB,WACtB,IAAMpF,EAAWe,cAEjBE,aAAgB,WACd,IAAMoE,EAAc,SAAC/D,GACfA,EAAEgE,eACJtF,EAASD,EAAgBuB,EAAEgE,iBAI/B,OADAC,SAAS7B,iBAAiB,QAAS2B,GAC5B,WACLE,SAASJ,oBAAoB,QAASE,OFJ1CG,GACA,IAAMC,EAAYhF,YAAYI,GAC9B,OACE,uBAAKK,UAAU,2BACb,qBAAGwE,KAAK,qBAAqBxE,UAAU,kBAAvC,oBACA,sBAAIA,UAAU,QAAd,oBACA,wIACA,gBAAC,EAAD,MACCuE,GAAa,uBAAKvE,UAAU,QAAO,gBAAC,EAAD,OACpC,gBAAC,EAAD,QGTAyE,G,YAAQC,sBAAYC,EAAaC,8BACrCC,0BAAgBC,QAGlBC,iBACE,gBAAC,IAAD,CAAeN,MAAOA,GACpB,gBAAC,EAAD,OAEFJ,SAASW,eAAe,W","file":"static/js/main.5424d981.chunk.js","sourcesContent":["import flatten from 'lodash.flatten';\r\n\r\nconst SUPPORT_GET_AS_ENTRY = typeof DataTransferItem.prototype.webkitGetAsEntry === 'function';\r\n\r\ninterface FileSystemEntry {\r\n  isFile: true;\r\n  isDirectory: false;\r\n  file(successCallback: (file: File) => void): void;\r\n}\r\n\r\ninterface FileSystemDirectoryEntry {\r\n  isFile: false;\r\n  isDirectory: true;\r\n  createReader(): FileSystemDirectoryReader;\r\n}\r\n\r\ninterface FileSystemDirectoryReader {\r\n  readEntries(successCallback: (file: FileSystemEntry[]) => void): void;\r\n}\r\n\r\nconst getFilesFromEntry = async (entry: FileSystemEntry | FileSystemDirectoryEntry): Promise<File[]> => {\r\n  if (entry.isFile) {\r\n    const file = await new Promise<File>((resolve) => entry.file(resolve));\r\n    return [file];\r\n  } else {\r\n    const reader = entry.createReader();\r\n    const entries = await new Promise<(FileSystemEntry | FileSystemDirectoryEntry)[]>((resolve) => reader.readEntries(resolve));\r\n    const entryFiles = await Promise.all(entries.map(getFilesFromEntry));\r\n    return flatten(entryFiles);\r\n  }\r\n};\r\n\r\nexport const getFilesFromDataTransfer = async (dataTransfer: DataTransfer): Promise<File[]> => {\r\n  const files = dataTransfer.files ? Array.from(dataTransfer.files) : [];\r\n  const items = dataTransfer.items ? Array.from(dataTransfer.items).filter((item) => item.kind === 'file') : [];\r\n  if (items.length && SUPPORT_GET_AS_ENTRY) {\r\n    const entries = items.map((item) => item.webkitGetAsEntry());\r\n    // Each entry can contain multiple files.\r\n    const entryFiles = await Promise.all(entries.map(getFilesFromEntry));\r\n    // Flatten the files from each entry into a single array.\r\n    return flatten(entryFiles);\r\n  }\r\n  return files;\r\n};\r\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { SerializedFile } from '../types';\nimport { getFilesFromDataTransfer } from '../get-files-from-data-transfer';\n\n/* Reset action */\n\nexport const ACTION_RESET = 'RESET';\n\nexport interface ActionReset extends Action<typeof ACTION_RESET> { }\n\nexport const isActionReset = (action: Action): action is ActionReset => (\n  action.type === ACTION_RESET\n);\n\nexport const reset = (): ActionReset => ({\n  type: ACTION_RESET,\n});\n\n/* Add files action */\n\nexport const ACTION_ADD_FILES = 'ADD_FILES';\n\nexport interface ActionAddFiles extends Action<typeof ACTION_ADD_FILES> {\n  payload: {\n    files: SerializedFile[];\n  };\n}\n\nexport const isActionAddFiles = (action: Action): action is ActionAddFiles => (\n  action.type === ACTION_ADD_FILES\n);\n\nexport const addFiles = (files: File[] | FileList): ActionAddFiles => ({\n  type: ACTION_ADD_FILES,\n  payload: {\n    files: Array.from(files, (file) => ({\n      name: file.name,\n      size: file.size,\n      type: file.type || null,\n      last: new Date(file.lastModified).toISOString(),\n      blob: URL.createObjectURL(file),\n    })),\n  },\n});\n\nexport const addDataTransfer = (dataTransfer: DataTransfer): ThunkAction<Promise<void>, unknown, void, ActionAddFiles> => async (dispatch) => {\n  const files = await getFilesFromDataTransfer(dataTransfer);\n  if (files.length) {\n    dispatch(addFiles(files));\n  }\n};\n\n/* Remove files action */\n\nexport const ACTION_REMOVE_FILES = 'REMOVE_FILES';\n\nexport interface ActionRemoveFiles extends Action<typeof ACTION_REMOVE_FILES> {\n  payload: {\n    blobs: string[];\n  };\n}\n\nexport const isActionRemoveFiles = (action: Action): action is ActionRemoveFiles => (\n  action.type === ACTION_REMOVE_FILES\n);\n\nexport const removeFile = (blob: string): ActionRemoveFiles => ({\n  type: ACTION_REMOVE_FILES,\n  payload: {\n    blobs: [blob],\n  },\n});\n\nexport const removeFiles = (blobs: string[]): ActionRemoveFiles => ({\n  type: ACTION_REMOVE_FILES,\n  payload: {\n    blobs,\n  },\n});\n","import { Reducer } from 'redux';\nimport { TypedUseSelectorHook, useSelector as useReactReduxSelector } from 'react-redux';\nimport { SerializedFile } from '../types';\nimport { isActionReset, isActionAddFiles, isActionRemoveFiles } from './actions';\n\nexport interface RootReducerState {\n  files: SerializedFile[];\n  latest: string | null;\n}\n\nexport const DEFAULT_STATE: RootReducerState = {\n  files: [],\n  latest: null,\n};\n\nexport const reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\n  if (isActionReset(action)) {\n    return DEFAULT_STATE;\n  }\n\n  if (isActionAddFiles(action)) {\n    return {\n      ...state,\n      files: [\n        ...state.files,\n        ...action.payload.files,\n      ],\n      latest: action.payload.files.length === 1 ? action.payload.files[0].blob : null,\n    };\n  }\n\n  if (isActionRemoveFiles(action)) {\n    let { files, latest } = state;\n    const toRemove = action.payload.blobs;\n    return {\n      ...state,\n      files: files.filter((file) => (\n        toRemove.indexOf(file.blob) < 0\n      )),\n      latest: latest !== null && toRemove.indexOf(latest) < 0 ? latest : null,\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n\nexport const useSelector: TypedUseSelectorHook<RootReducerState> = useReactReduxSelector;\n\nexport const getFiles = (state: RootReducerState) => state.files;\n\nexport const getFileDetailsByBlobURL = (state: RootReducerState, blobURL: string) => (\n  state.files.find((file) => file.blob === blobURL) || null\n);\n\nexport const getLatestBlobURL = (state: RootReducerState) => state.latest;\n\nexport const hasFiles = (state: RootReducerState) => state.files.length > 0;\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { reset } from './store/actions';\r\n\r\nconst ResetButton: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const handleClick = React.useCallback(() => {\r\n    dispatch(reset());\r\n  }, [dispatch]);\r\n  return (\r\n    <button\r\n      className=\"btn btn-light\"\r\n      type=\"button\"\r\n      onClick={handleClick}\r\n    >\r\n      Clear all files\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetButton;\r\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addFiles } from './store/actions';\r\n\r\nconst FileSelector: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const handleChange = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\r\n    if (e.currentTarget.files) {\r\n      dispatch(addFiles(e.currentTarget.files));\r\n      // Clear file input. Allows the same file to be selected twice.\r\n      // This is necessary if the user clears the file list but wants\r\n      // to add the same file again afterwards.\r\n      e.currentTarget.value = '';\r\n    }\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"custom-file\">\r\n      <input\r\n        id=\"FileSelector\"\r\n        type=\"file\"\r\n        multiple={true}\r\n        onChange={handleChange}\r\n      />\r\n      <label\r\n        className=\"custom-file-label\"\r\n        htmlFor=\"FileSelector\"\r\n      >\r\n        Choose files\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileSelector;\r\n","import * as React from 'react';\r\n\r\nexport interface Props {\r\n  children: string;\r\n}\r\n\r\nconst FileName: React.FC<Props> = ({ children }) => {\r\n  let index = children.lastIndexOf('.');\r\n  if (index === -1) index = children.length;\r\n  const filename = children.substring(0, index);\r\n  const extension = children.substring(index);\r\n  return (\r\n    <>\r\n      <span\r\n        className=\"file-icon file-icon-xs mr-2\"\r\n        data-type={extension.replace(/^\\./, '')}\r\n        style={{ verticalAlign: 'text-top' }}\r\n      />\r\n      <span>{filename}</span>\r\n      {extension && <span>{extension}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FileName;\r\n","import * as React from 'react';\nimport format from 'date-fns/format';\n\nexport interface Props {\n  children: string;\n}\n\nconst FileLastModified: React.FC<Props> = ({ children }) => {\n  return <>{format(new Date(children), 'EEE d MMMM yyyy \\'at\\' h:mm a')}</>;\n};\n\nexport default FileLastModified;\n","import * as React from 'react';\nimport filesize from 'filesize';\n\nexport interface Props {\n  children: number;\n}\n\nconst FileSize: React.FC<Props> = ({ children }) => {\n  return <>{filesize(children, { round: 0 })}</>;\n};\n\nexport default FileSize;\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeFile } from './store/actions';\n\nexport interface Props {\n  blob: string;\n}\n\nconst RemoveButton: React.FC<Props> = ({ blob: blobURL }) => {\n  const dispatch = useDispatch();\n  const handleClick = React.useCallback(() => {\n    dispatch(removeFile(blobURL));\n  }, [dispatch, blobURL]);\n  return (\n    <button\n      className=\"btn btn-light\"\n      type=\"button\"\n      onClick={handleClick}\n      title=\"Remove this file\"\n    >\n      &times;\n    </button>\n  );\n};\n\nexport default RemoveButton;\n","import * as React from 'react';\r\nimport { useSelector, getLatestBlobURL } from './store';\r\n\r\nexport interface Props {\r\n  blob: string;\r\n}\r\n\r\nconst CopyButton: React.FC<Props> = ({ blob: blobURL }) => {\r\n  const latestBloblURL = useSelector(getLatestBlobURL);\r\n  const [dataURL, setDataURL] = React.useState<string | null>(null);\r\n  const [buttonText, setButtonText] = React.useState<string | null>(null);\r\n  const process = React.useCallback(async () => {\r\n    try {\r\n      const res = await fetch(blobURL);\r\n      const blob = await res.blob();\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () => {\r\n        setDataURL(String(reader.result));\r\n      });\r\n      reader.readAsDataURL(blob);\r\n    } catch (err) {\r\n      // TODO: Handle error\r\n    }\r\n  }, [blobURL]);\r\n  const handleClickProcess = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>((e) => {\r\n    e.preventDefault();\r\n    process();\r\n  }, [process]);\r\n  const handleClickCopy = React.useCallback<React.MouseEventHandler<HTMLButtonElement>>(async (e) => {\r\n    e.preventDefault();\r\n    if (dataURL !== null) {\r\n      await navigator.clipboard.writeText(dataURL);\r\n      setButtonText('Copied!');\r\n    }\r\n  }, [dataURL]);\r\n  React.useEffect(() => {\r\n    if (blobURL === latestBloblURL) {\r\n      process();\r\n    }\r\n  }, [blobURL, latestBloblURL, process]);\r\n  React.useEffect(() => {\r\n    if (buttonText !== null) {\r\n      const clock = setTimeout(() => {\r\n        setButtonText(null);\r\n      }, 1000);\r\n      return () => clearTimeout(clock);\r\n    }\r\n  }, [buttonText]);\r\n  if (dataURL === null) {\r\n    return (\r\n      <button\r\n        className=\"btn btn-light\"\r\n        type=\"button\"\r\n        onClick={handleClickProcess}\r\n      >\r\n        Generate\r\n      </button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button\r\n        className=\"btn btn-dark\"\r\n        type=\"button\"\r\n        onClick={handleClickCopy}\r\n      >\r\n        {buttonText || 'Copy'}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CopyButton;\r\n","import * as React from 'react';\r\nimport { useSelector, getFileDetailsByBlobURL } from './store';\r\nimport FileName from './FileName';\r\nimport FileLastModified from './FileLastModified';\r\nimport FileSize from './FileSize';\r\nimport RemoveButton from './RemoveButton';\r\nimport CopyButton from './CopyButton';\r\n\r\nexport interface Props {\r\n  blob: string;\r\n}\r\n\r\nconst WARNING_SIZE = 1000000;\r\n\r\nconst FilesListItem: React.FC<Props> = ({ blob: blobURL }) => {\r\n  const fileDetails = useSelector((state) => getFileDetailsByBlobURL(state, blobURL));\r\n  if (!fileDetails) return null;\r\n  return (\r\n    <div className=\"card card-body mb-3 position-relative\">\r\n      <div className=\"d-flex\">\r\n        <div className=\"flex-grow-1\">\r\n          <FileName>{fileDetails.name}</FileName><br />\r\n          <span className=\"text-secondary\"><FileLastModified>{fileDetails.last}</FileLastModified></span><br />\r\n          <span className=\"text-secondary\">{fileDetails.type || <em>unknown</em>}</span>\r\n          {' '}<span className=\"text-secondary\">&bull;</span>{' '}\r\n          <span className={fileDetails.size > WARNING_SIZE ? 'text-warning' : 'text-primary'}><FileSize>{fileDetails.size}</FileSize></span>\r\n        </div>\r\n        <div className=\"ml-1\">\r\n          <CopyButton blob={blobURL} />\r\n        </div>\r\n        <div className=\"ml-1\">\r\n          <RemoveButton blob={blobURL} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilesListItem;\r\n","import * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getFiles } from './store';\r\nimport FilesListItem from './FilesListItem';\r\n\r\nconst FilesList: React.FC = () => {\r\n  const files = useSelector(getFiles);\r\n  return (\r\n    <ol className=\"list-unstyled\">\r\n      {files.map((file) => (\r\n        <li key={file.blob}>\r\n          <FilesListItem blob={file.blob} />\r\n        </li>\r\n      ))}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default FilesList;\r\n","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDragDrop } from './use-drag-drop';\nimport { usePaste } from './use-paste';\nimport { hasFiles } from './store';\nimport ResetButton from './ResetButton';\nimport FileSelector from './FileSelector';\nimport FilesList from './FilesList';\n\nconst App: React.FC = () => {\n  useDragDrop();\n  usePaste();\n  const showReset = useSelector(hasFiles);\n  return (\n    <div className=\"App container mt-5 mb-5\">\n      <a href=\"https://skeoh.com/\" className=\"text-secondary\">&larr; skeoh.com</a>\n      <h1 className=\"mb-5\">File to data URL</h1>\n      <p>Drop a file into this window to generate a data URL. You can also use copy+paste or the file browser below.</p>\n      <FileSelector />\n      {showReset && <div className=\"my-3\"><ResetButton /></div>}\n      <FilesList />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addDataTransfer } from './store/actions';\r\n\r\nexport const useDragDrop = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    const handleDragover = (e: DragEvent) => {\r\n      if (!e.dataTransfer) return;\r\n      const kinds = Array.from(e.dataTransfer.items, (item) => item.kind);\r\n      const hasFiles = kinds.some((kind) => kind === 'file');\r\n      e.dataTransfer.dropEffect = hasFiles ? 'copy' : 'none';\r\n      if (hasFiles) {\r\n        e.preventDefault();\r\n      }\r\n    };\r\n    const handleDrop = (e: DragEvent) => {\r\n      e.preventDefault();\r\n      if (e.dataTransfer) {\r\n        dispatch(addDataTransfer(e.dataTransfer));\r\n      }\r\n    };\r\n    window.addEventListener('dragover', handleDragover);\r\n    window.addEventListener('drop', handleDrop);\r\n    return () => {\r\n      window.removeEventListener('dragover', handleDragover);\r\n      window.removeEventListener('drop', handleDrop);\r\n    };\r\n  });\r\n};\r\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addDataTransfer } from './store/actions';\r\n\r\nexport const usePaste = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    const handlePaste = (e: ClipboardEvent) => {\r\n      if (e.clipboardData) {\r\n        dispatch(addDataTransfer(e.clipboardData));\r\n      }\r\n    };\r\n    document.addEventListener('paste', handlePaste);\r\n    return () => {\r\n      document.removeEventListener('paste', handlePaste);\r\n    };\r\n  });\r\n};\r\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'fileicon.css/fileicon.css';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}